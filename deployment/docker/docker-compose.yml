version: '3.5'
services:
  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent
    environment:
     - HTTP_PROXY=http://10.155.110.30:3128
     - HTTPS_PROXY=http://10.155.110.30:3128
     - NO_PROXY=localhost,127.0.0.1,.softailor.ru,192.168.4.0,192.168.5.0,.dmz.test.ot,victoriametrics
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - /root/vm-p-dsa/deployment/docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--promscrape.config=/etc/prometheus/prometheus.yml'
      - '--remoteWrite.url=http://victoriametrics:8428/api/v1/write'
    networks:
      - vm_net
    restart: always
  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics
    environment:
     - HTTP_PROXY=http://10.155.110.30:3128
     - HTTPS_PROXY=http://10.155.110.30:3128
     - NO_PROXY=localhost,127.0.0.1,.softailor.ru,192.168.4.0,192.168.5.0,.dmz.test.ot,victoriametrics
    ports:
      - 8428:8428
      - 8089:8089
      - 8089:8089/udp
      - 2003:2003
      - 2003:2003/udp
      - 4242:4242
    volumes:
      - vmdata:/storage
    command:
      - '--storageDataPath=/storage'
      - '--graphiteListenAddr=:2003'
      - '--opentsdbListenAddr=:4242'
      - '--httpListenAddr=:8428'
      - '--influxListenAddr=:8089'
    networks:
      - vm_net
    restart: always
  grafana:
    container_name: grafana
    image: grafana/grafana:8.0.0
    environment:
     - HTTP_PROXY=http://10.155.110.30:3128
     - HTTPS_PROXY=http://10.155.110.30:3128
     - NO_PROXY=localhost,127.0.0.1,.softailor.ru,192.168.4.0,192.168.5.0,.dmz.test.ot,victoriametrics
    depends_on:
      - "victoriametrics"
    ports:
      - 3000:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - /root/vm-p-dsa/deployment/docker/provisioning/:/etc/grafana/provisioning/
      - /root/vm-p-dsa/deployment/docker/dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
      - /root/vm-p-dsa/deployment/docker/dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
    networks:
      - vm_net
    restart: always
  vmalert:
    container_name: vmalert
    image: victoriametrics/vmalert
    environment:
     - HTTP_PROXY=http://10.155.110.30:3128
     - HTTPS_PROXY=http://10.155.110.30:3128
     - NO_PROXY=localhost,127.0.0.1,.softailor.ru,192.168.4.0,192.168.5.0,.dmz.test.ot,victoriametrics
    depends_on:
      - "victoriametrics"
      - "alertmanager"
    ports:
      - 8880:8880
    volumes:
      - /root/vm-p-dsa/deployment/docker/alerts.yml:/etc/alerts/alerts.yml
    command:
      - '--datasource.url=http://victoriametrics:8428/'
      - '--remoteRead.url=http://victoriametrics:8428/'
      - '--remoteWrite.url=http://victoriametrics:8428/'
      - '--notifier.url=http://victoriametrics:9093/'
      - '--rule=/etc/alerts/*.yml'
      # display source of alerts in grafana
      - '-external.url=http://127.0.0.1:3000' #grafana outside container
      - '--external.alert.source=explore?orgId=1&left=["now-1h","now","VictoriaMetrics",{"expr":"{{$$expr|quotesEscape|crlfEscape|queryEscape}}"},{"mode":"Metrics"},{"ui":[true,true,true,"none"]}]' ## when copypaste the line be aware of '$$' for escaping in '$expr'    networks:
    networks:
      - vm_net
    restart: always
  alertmanager:
    container_name: alertmanager
    image:  prom/alertmanager
    environment:
     - HTTP_PROXY=http://10.155.110.30:3128
     - HTTPS_PROXY=http://10.155.110.30:3128
     - NO_PROXY=localhost,127.0.0.1,.softailor.ru,192.168.4.0,192.168.5.0,.dmz.test.ot,victoriametrics
    volumes:
      - /root/vm-p-dsa/deployment/docker/alertmanager.yml:/config/alertmanager.yml
    command:
      - '--config.file=/config/alertmanager.yml'
    ports:
      - 9093:9093
    networks:
      - vm_net
    restart: always
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
       - vm_net
    restart: always
volumes:
  vmagentdata: {}
  vmdata: {}
  grafanadata: {}
networks:
  vm_net:
